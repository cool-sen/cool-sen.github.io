<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring源码分析 on Recording</title><link>https://coolsen96.github.io/categories/spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><description>Recent content in Spring源码分析 on Recording</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 04 May 2020 18:34:57 +0800</lastBuildDate><atom:link href="https://coolsen96.github.io/categories/spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring-IOC-创建Bean-循环依赖处理</title><link>https://coolsen96.github.io/posts/ioc-createbean-4/</link><pubDate>Mon, 04 May 2020 18:34:57 +0800</pubDate><guid>https://coolsen96.github.io/posts/ioc-createbean-4/</guid><description>1 简介 循环依赖并不仅仅只是在 doCreateBean 方法中处理，而是在整个加载 bean 的过程中都有涉及。所以，本文内容并不仅仅只局限于 doCreateBean 方法，而是从整个 Bean 的加载过程进行</description></item><item><title>Spring-IOC-创建Bean-属性填充</title><link>https://coolsen96.github.io/posts/ioc-createbean-3/</link><pubDate>Sun, 03 May 2020 17:35:57 +0800</pubDate><guid>https://coolsen96.github.io/posts/ioc-createbean-3/</guid><description>1 简介 在Spring 创建 bean 的流程中，Spring 先通过反射创建一个原始的 bean 对象，然后再向这个原始的 bean 对象中填充属性。对于填充属性这个过程，简</description></item><item><title>创建bean的实例</title><link>https://coolsen96.github.io/posts/ioc-createbean-2/</link><pubDate>Sat, 02 May 2020 17:10:04 +0800</pubDate><guid>https://coolsen96.github.io/posts/ioc-createbean-2/</guid><description>1 简介 本文将详细分析doCreateBean方法中的一个重要的调用，即createBeanInstance方法。先来了解一下方法的大致脉络。</description></item><item><title>IOC CreateBean</title><link>https://coolsen96.github.io/posts/ioc-create-bean/</link><pubDate>Fri, 01 May 2020 17:10:02 +0800</pubDate><guid>https://coolsen96.github.io/posts/ioc-create-bean/</guid><description>createBean方法 createBean该抽象方法的默认实现是在类 AbstractAutowireCapableBeanFactory 中实现，代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description></item><item><title>﻿Spring-IoC -加载 Bean-总览</title><link>https://coolsen96.github.io/posts/ioc-get-bean-1/</link><pubDate>Thu, 23 Apr 2020 18:34:57 +0800</pubDate><guid>https://coolsen96.github.io/posts/ioc-get-bean-1/</guid><description>2.1 获取 beanName 代码如下： 1 2 3 // AbstractBeanFactory.java final String beanName = transformedBeanName(name); 这段代码的作用：这里传递的是 name 方法，不一定就是 beanName，可能是 aliasName ，也有可能是 FactoryBean ，所以这里需要调</description></item><item><title>Spring-IOC-默认标签的解析</title><link>https://coolsen96.github.io/posts/ioc-load-beandefinitions-2/</link><pubDate>Sun, 19 Apr 2020 15:57:17 +0800</pubDate><guid>https://coolsen96.github.io/posts/ioc-load-beandefinitions-2/</guid><description>前言 Spring中的标签包括默认标签和自定义标签两种，而两种标签的用法以及解析方式存在着很大的不同。本篇文章主要分析默认标签的解析。 默认标签</description></item><item><title>IOC XMLBeanDefinitionReader</title><link>https://coolsen96.github.io/posts/ioc-load-beandefinitions-1/</link><pubDate>Sat, 18 Apr 2020 18:34:57 +0800</pubDate><guid>https://coolsen96.github.io/posts/ioc-load-beandefinitions-1/</guid><description>前言 1. Resource资源定位 Spring的配置文件读取是通过ClassPathResource进行封装的，如new ClassPathResource (&amp;quot;bean</description></item><item><title>Spring-IOC-从单例缓存中获取单例 Bean</title><link>https://coolsen96.github.io/posts/ioc-get-bean-getsingleton/</link><pubDate>Sat, 18 Apr 2020 18:34:57 +0800</pubDate><guid>https://coolsen96.github.io/posts/ioc-get-bean-getsingleton/</guid><description>获取单例Bean 1 getSingleton 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 //DefaultSingletonBeanRegistry.java public Object getSingleton(String beanName) { // allowEarlyReference 参数，allowEarlyRefere</description></item></channel></rss>